// resolution
var res = 370


def scene_at(now)
{
  var ambient_factor = 0.1
  var x = Animations.animate(0, 10, seconds(5))
  var camera = Cameras.perspective( [ "eye": pos(0,0,5),
                                      "look_at": pos(0,0,0) ] )

  var white = Materials.uniform( [ "ambient": Colors.white() * 0.1, "diffuse": Colors.white() * 1, "specular": Colors.white() * 0.8, "specular_exponent": 2] )
  var black = Materials.uniform( [ "ambient": Colors.white() * 0.2, "diffuse": Colors.white() * 0.2, "specular": Colors.white() * 0.8, "specular_exponent": 2] )
  var checkered = Materials.checkered2d( 1, black, white )


  var ceiling_material = Materials.uniform( [ "ambient": Colors.white() * ambient_factor,
                                            "diffuse": Colors.white() * 0.8,
                                            "reflectivity": 0.5 ] )

  var left_wall_material = Materials.uniform( [ "ambient": Colors.red() * ambient_factor,
                                                "diffuse": Colors.red() * 0.8 ] )

  var right_wall_material = Materials.uniform( [ "ambient": Colors.green() * ambient_factor,
                                                 "diffuse": Colors.green() * 0.8 ] )

  var back_wall_material = Materials.uniform( [ "ambient": Colors.blue() * ambient_factor,
                                                "diffuse": Colors.blue() * 0.8 ] )

  var floor_material = checkered

  var transparent_sphere_material = Materials.uniform( [ "ambient": Colors.blue() * ambient_factor,
                                             "diffuse": Colors.blue() * 0.8,
                                             "specular": Colors.white() * 0.8,
                                             "specular_exponent": 10,
                                             "transparency": 0.7,
                                             "refractive_index": 2.5 ] )

  var reflective_sphere_material = Materials.uniform( [ "ambient": Colors.white() * ambient_factor,
                                                   "diffuse": Colors.white() * 0.8,
                                                   "reflectivity": 0.8 ] )


  var primitives = []
  primitives.push_back( translate(vec(0,0,0), decorate(reflective_sphere_material, sphere())) )
  primitives.push_back( translate(vec(0,-2,0), decorate(floor_material, xz_plane())) )
  primitives.push_back( translate(vec(0,2,0), decorate(ceiling_material, xz_plane())) )
  primitives.push_back( translate(vec(-2,0,0), decorate(left_wall_material, yz_plane())) )
  primitives.push_back( translate(vec(2,0,0), decorate(right_wall_material, yz_plane())) )
  primitives.push_back( translate(vec(0,0,-2), decorate(back_wall_material, xy_plane())) )


  var root = union(primitives)

  var lights = [ Lights.omnidirectional( pos(0,1.9,0), Colors.white() ) ]
  //var lights = [ Lights.omnidirectional( pos(0,0,5), Colors.white() ) ]

  create_scene(camera, root, lights)
}

            
            var renderer = Renderers.standard( [ "width": res,
                                     "height": res,
                                     "sampler": Samplers.single(),
                                     "ray_tracer": Raytracers.v5() ] )

pipeline( scene_animation(scene_at, seconds(3)),
          [ Pipeline.animation(15),
            Pipeline.renderer(renderer),
            Pipeline.wif(),
            Pipeline.base64(),
            Pipeline.stdout() ] )