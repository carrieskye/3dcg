// resolution
var res = 370

def scene_at(now)
{
  // Create animation: x goes from -10 to +10 in 5 seconds
  var x = Animations.animate(-10, 10, seconds(5))

  // Create camera 
  var camera = Cameras.perspective( [ "eye": pos(x[now]+10, x[now]+10, 7), "look_at": pos(0, 0, 0), "up": vec(0, 1, 0).normalized() ] )

  // Create material
  var white = Materials.uniform( [ "ambient": Colors.white() * 0.1, "diffuse": Colors.white() * 0.2, "specular": Colors.white() * 0.8, "specular_exponent": 10 ] )
  var black = Materials.uniform( [ "ambient": Colors.black() * 0.1, "diffuse": Colors.black() * 0.2, "specular": Colors.white() * 0.8, "specular_exponent": 10 ] )

  var xy_plane_material = Materials.checkered2d(1, black, white)
  var xz_plane_material = Materials.checkered2d(1, white, black)
  
  var triangle_material = Materials.uniform( [ "ambient": Colors.blue() * 0.1, "diffuse": Colors.blue() * 0.4, "specular": Colors.white() * 0.8, "specular_exponent": 10 ] ) 

  // Create primitives
  var xyplane = translate(vec(0, 0, -2), decorate(xy_plane_material, xy_plane()))
  var xzplane = translate(vec(0, -2, 0), decorate(xz_plane_material, xz_plane()))
                  
  //var sphere = translate(vec(0, 2, 0), decorate(sphere_material, sphere()))
  var v1 = pos(0,0,0)
  var v2 = pos(0,1,1)
  var v3 = pos(0,2,2)
  var triangle = translate(vec(0, -2, 0), decorate(triangle_material, triangle(v1, v2, v3)))
  
  // Create root union
  var shapes = [ triangle
  //, xyplane, xzplane 
  ]  
  var root_union = union(shapes)

  // Create list of lights
  var lights = [ Lights.omnidirectional(pos(0, 5, 1.5), Colors.white()) ]

  create_scene(camera, root_union, lights)
}

var renderer = Renderers.standard( [ "width": res, "height": res, "sampler": Samplers.single(), "ray_tracer": Raytracers.v4() ] )
pipeline( scene_animation(scene_at, seconds(5)), [ Pipeline.animation(15), Pipeline.renderer(renderer), Pipeline.wif(), Pipeline.base64(), Pipeline.stdout() ] )