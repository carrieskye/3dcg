// resolution
var res = 370
  

def scene_at(now)
{
  // Create animation: x goes from -10 to +10 in 5 seconds
  var x = Animations.animate(-10, 10, seconds(5))

  // Create camera at (x[now], 0, 5).
  // x[now] returns the value of x at the current time in the animation
  // x[now]
  var camera = Cameras.perspective( [ "eye": pos(x[now]+10,x[now]+10,7),
                                      "look_at": pos(0,0,0),
                                      "up": vec(0,1,0).normalized() ] )

  // Create material

  var xy_plane_material = Materials.uniform( [ "ambient": Colors.red() * 0.1, "diffuse": Colors.white() * 0.2, "specular": Colors.red() * 0.8, "specular_exponent": 2])
  var xz_plane_material = Materials.uniform( [ "ambient": Colors.blue() * 0.1, "diffuse": Colors.white() * 0.2, "specular": Colors.blue() * 0.8, "specular_exponent": 2])
  
  var xyplane = translate(vec(0,0,-2), decorate(xy_plane_material, xy_plane()))
  var xzplane = translate(vec(0,-2,0), decorate(xz_plane_material, xz_plane()))
     
  var sphere1_material = Materials.uniform( [ "ambient": Colors.white() * 0.1, "diffuse": Colors.white() * 0.8, "reflectivity": 0.9 ] )
  var sphere2_material = Materials.uniform( [ "ambient": Colors.yellow() * 0.1, "diffuse": Colors.white() * 0.8, "specular": Colors.yellow() * 0.8, "specular_exponent": 2 , "reflectivity": 0.3] )     
  var sphere3_material = Materials.uniform( [ "ambient": Colors.green() * 0.1, "diffuse": Colors.white() * 0.8, "specular": Colors.green() * 0.8, "specular_exponent": 2 ] )     

  var sphere1 = sphere()
  sphere1 = translate(vec(0,2,0), sphere1)
  sphere1 = decorate(sphere1_material, sphere1)
       
  var sphere2 = sphere()
  sphere2 = translate(vec(3,2,0), sphere2)
  sphere2 = decorate(sphere2_material, sphere2)
  
  var sphere3 = sphere()
  sphere3 = translate(vec(3,2,2), sphere3)
  sphere3 = decorate(sphere3_material, sphere3)
  
  var shapes = [ sphere1, sphere2, sphere3, xyplane, xzplane ]
  
  var root_union = union(shapes)
  
  // Create decorated sphere

  // Create empty list of lights (we're rendering with v0, which ignores lights, so why bother)
  var lights = [ Lights.omnidirectional(pos(0,5,1.5), Colors.white() ) ]

  create_scene(camera, root_union, lights)
}

var renderer = Renderers.standard( [ "width": res,
                                     "height": res,
                                     "sampler": Samplers.single(),
                                     "ray_tracer": Raytracers.v5() ] )

pipeline( scene_animation(scene_at, seconds(3)),
          [ Pipeline.animation(15),
            Pipeline.renderer(renderer),
            Pipeline.wif(),
            Pipeline.base64(),
            Pipeline.stdout() ] )