// resolution
var res = 370
  
def scene_at(now)
{
  // Create animation: x goes from -10 to +10 in 5 seconds
  var x = Animations.animate(-10, 10, seconds(5))

  // Create camera
  var camera = Cameras.perspective( [ "eye": pos(x[now]+10 ,x[now]+10 ,7), "look_at": pos(0, 0, 0), "up": vec(0, 1, 0).normalized() ] )

  // Create material
  var square_material = Materials.uniform( [ "ambient": Colors.white() * 0.1, "diffuse": Colors.white() * 0.8, "specular": Colors.white() * 0.5, "specular_exponent": 10, "reflectivity": 0.2] )
  var red = Materials.uniform( [ "ambient": Colors.red() * 1, "diffuse": Colors.red() * 0.4, "specular": Colors.white() * 0.5, "specular_exponent": 10 ] )
  var blue = Materials.uniform( [ "ambient": Colors.blue() * 1, "diffuse": Colors.blue() * 0.4, "specular": Colors.white() * 0.5, "specular_exponent": 10 ] )  

  // Create primitives
  var xysquare = translate(vec(0, 0, -2), decorate(square_material, xy_square()))
  var sphere1 = translate(vec(0, -1.5, 0), decorate(red, sphere()))  
  var sphere2 = translate(vec(0, 1.5, 0), decorate(blue, sphere()))
  
  var shapes = [ sphere1, sphere2, xysquare ]
  
  var root_union = union(shapes)

  // Create lights
  var lights = [ Lights.omnidirectional( pos(0, 0, 5), Colors.white() )]

  create_scene(camera, root_union, lights)
}

var renderer = Renderers.standard( [ "width": res, "height": res, "sampler": Samplers.single(), "ray_tracer": Raytracers.v6() ] )
pipeline( scene_animation(scene_at, seconds(5)), [ Pipeline.animation(15), Pipeline.renderer(renderer), Pipeline.wif(), Pipeline.base64(), Pipeline.stdout() ] )