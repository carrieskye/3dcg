// resolution
var res = 270

def scene_at(now)
{
  // Create animation: x goes from -10 to +10 in 5 seconds
  var x = Animations.animate(-6, 5, seconds(5))

  // Create camera 
  var camera = Cameras.perspective( [ "eye": pos(x[now]+10, x[now]+1, x[now]+7), "look_at": pos(0, 0, 0), "up": vec(0, 2, 0).normalized() ] )

  // Create material
  var white_material = Materials.uniform( [ "ambient": Colors.white() * 0.2, "diffuse": Colors.white() * 0.8, "specular": Colors.white() * 0.5, "specular_exponent": 10, "reflectivity": 0.2 ] )
  var red_material = Materials.uniform( [ "ambient": Colors.red() * 0.2, "diffuse": Colors.red() * 0.8, "specular": Colors.white() * 0.5, "specular_exponent": 100  ] ) 
  var blue_material = Materials.uniform( [ "ambient": Colors.blue() * 0.2, "diffuse": Colors.blue() * 0.8, "specular": Colors.white() * 0.5, "specular_exponent": 100  ] ) 
  var yellow_material = Materials.uniform( [ "ambient": Colors.yellow() * 0.2, "diffuse": Colors.yellow() * 0.8, "specular": Colors.white() * 0.5, "specular_exponent": 100  ] ) 
 
  // Create primitives
  var planexy = translate(vec(0, 0, -10), decorate(white_material, xy_plane()))
  var planexz = translate(vec(0,-5, 0), decorate(white_material, xz_plane()))
  var sphere1 = translate(vec(0, -2, -0.5), decorate(blue_material, sphere()))
  var sphere2 = translate(vec(0, -2, 0.5), decorate(blue_material, sphere()))
  var sphere3 = translate(vec(0, 0, -0.5), decorate(red_material, sphere()))
  var sphere4 = translate(vec(0, 0.5, 0.5), decorate(red_material, sphere()))
  var sphere5 = translate(vec(0, 2, -0.5), decorate(yellow_material, sphere()))
  var sphere6 = translate(vec(0, 2, 0.5), decorate(yellow_material, sphere()))
  
  // Create root union
  var shapes_intersection = [ sphere3, sphere4 ]  
  var intersection = intersection(shapes_intersection)
  var shapes_union = [ intersection, planexy, planexz ]
  var root_union = union(shapes_union)

  // Create list of lights
  var lights = [ Lights.omnidirectional(pos(3, 4, 4), Colors.white()) ]

  create_scene(camera, root_union, lights)
}

var renderer = Renderers.standard( [ "width": res, "height": res, "sampler": Samplers.single(), "ray_tracer": Raytracers.v5() ] )
pipeline( scene_animation(scene_at, seconds(5)), [ Pipeline.animation(15), Pipeline.renderer(renderer), Pipeline.wif(), Pipeline.base64(), Pipeline.stdout() ] )