// resolution
var res = 170


def scene_at(now)
{
  var ambient_factor = 0.1
  var y = Animations.animate(0, -360, seconds(1))
  var x = Animations.animate(0, -360, seconds(15))
  
  var camera = Cameras.perspective( [ "eye": pos(0,0,8),
                                      "look_at": pos(0,0,0) ] )

  var white = Materials.uniform( [ "ambient": Colors.white() * 0.1, "diffuse": Colors.white() * 1, "specular": Colors.white() * 0.8, "specular_exponent": 2] )
  var black = Materials.uniform( [ "ambient": Colors.black() * 0.2, "diffuse": Colors.black() * 0.2, "specular": Colors.black() * 0.8, "specular_exponent": 2] )
  
  var red = Materials.uniform( [ "ambient": Colors.red() * ambient_factor, "diffuse": Colors.red() * 0.8 , "specular": Colors.white() * 0.8, "specular_exponent": 2 ] )
  
  var checkered = Materials.checkered2d( 1, black, white )


  var ceiling_material = Materials.uniform( [ "ambient": Colors.white() * ambient_factor,
                                            "diffuse": Colors.white() * 0.8,
                                            "reflectivity": 0.5 ] )



  var left_wall_material = red;
  var right_wall_material = Materials.uniform( [ "ambient": Colors.green() * ambient_factor,
                                                 "diffuse": Colors.green() * 0.8 ] )

  var back_wall_material = Materials.uniform( [ "ambient": Colors.blue() * ambient_factor,
                                                "diffuse": Colors.blue() * 0.8 ] )

  var floor_material = checkered

  var transparent_sphere_material = Materials.uniform( [ "ambient": Colors.blue() * ambient_factor,
                                             "diffuse": Colors.blue() * 0.8,
                                             "specular": Colors.white() * 0.8,
                                             "specular_exponent": 10,
                                             "transparency": 0.7,
                                             "refractive_index": 2.5 ] )

  var reflective_sphere_material = Materials.uniform( [ "ambient": Colors.white() * ambient_factor,
                                                   "diffuse": Colors.white() * 0.8,
                                                   "reflectivity": 0.8 ] )


  var primitives = []
  
  var cube_primitive = triangle(pos(1,1,1), pos(2,2,2), pos(3,3,3))
  //scale(1, 1, 1, cube())
  
  //var rotating_cube_x = rotate_around_x(degrees(x[now]), cube_primitive)
  var rotating_cube_y = rotate_around_y(degrees(y[now]), cube_primitive)
  //var rotating_cube_z = rotate_around_z(degrees(x[now]), cube())
  
  var rotating_cube = rotating_cube_y
  
  var cube1 = decorate(checkered, rotating_cube)

  //primitives.push_back( translate(vec(0,0,0), decorate(reflective_sphere_material, sphere())) )
  
  //primitives.push_back( translate(vec(0,0,6), decorate(transparent_sphere_material, sphere())) )

  primitives.push_back( cube1 )

  primitives.push_back( translate(vec(0,-4,0), decorate(floor_material, xz_plane())) )
  primitives.push_back( translate(vec(0,4,0), decorate(ceiling_material, xz_plane())) )
  primitives.push_back( translate(vec(-4,0,0), decorate(left_wall_material, yz_plane())) )
  primitives.push_back( translate(vec(4,0,0), decorate(right_wall_material, yz_plane())) )
  primitives.push_back( translate(vec(0,0,-4), decorate(back_wall_material, xy_plane())) )


  var root = union(primitives)

  var lights = [ Lights.omnidirectional( pos(0,0,9), Colors.white() ) ]
  //var lights = [ Lights.omnidirectional( pos(0,0,5), Colors.white() ) ]

  create_scene(camera, root, lights)
}
var renderer = Renderers.standard( [ "width": res,
                                     "height": res,
                                     "sampler": Samplers.single(),
                                     "ray_tracer": Raytracers.v6() ] )

pipeline( scene_animation(scene_at, seconds(1)),
          [ Pipeline.animation(30),
            Pipeline.renderer(renderer),
            Pipeline.wif(),
            Pipeline.base64(),
            Pipeline.stdout() ] )