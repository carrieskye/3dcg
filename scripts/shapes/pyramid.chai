// resolution
var res = 170

def scene_at(now)
{
  var af = 0.3
  var x = Animations.animate(0, 360, seconds(1))
  var camera = Cameras.perspective( [ "eye": pos(0,0,8), "look_at": pos(0,0,0) ] )

  var white = Materials.uniform( [ "ambient": Colors.white() * af, "diffuse": Colors.white() * 0.8, "specular": Colors.white() * 0.8, "specular_exponent": 2] )
  var black = Materials.uniform( [ "ambient": Colors.black() * af, "diffuse": Colors.black() * 0.8, "specular": Colors.black() * 0.8, "specular_exponent": 2] )
  var checkered = Materials.checkered2d( 1, black, white )

  var ceiling_material =    Materials.uniform( [ "ambient": Colors.white() * af, "diffuse": Colors.white() * 0.8, "reflectivity": 0.5 ] )
  var left_wall_material =  Materials.uniform( [ "ambient": Colors.red()   * af, "diffuse": Colors.red() * 0.8 ] )
  var right_wall_material = Materials.uniform( [ "ambient": Colors.green() * af, "diffuse": Colors.green() * 0.8 ] )
  var back_wall_material =  Materials.uniform( [ "ambient": Colors.blue()  * af, "diffuse": Colors.blue() * 0.8 ] )

  var glass_material =      Materials.uniform( [ "ambient": Colors.blue()  * af, "diffuse": Colors.blue()  * 0.8, "specular": Colors.white() * 0.8, "specular_exponent": 10, "transparency": 0.7, "refractive_index": 2.5 ])
  var reflective_material = Materials.uniform( [ "ambient": Colors.white() * af, "diffuse": Colors.white() * 0.8, "reflectivity": 0.8 ] )

  var floor_material = checkered

  var primitives = []

  var triangle_red =    Materials.uniform( [ "ambient": Colors.red()    * af, "diffuse": Colors.red()    * 0.8  ] )
  var triangle_blue =   Materials.uniform( [ "ambient": Colors.blue()   * af, "diffuse": Colors.blue()   * 0.8  ] ) 
  var triangle_green =  Materials.uniform( [ "ambient": Colors.green()  * af, "diffuse": Colors.green()  * 0.8  ] ) 
  var triangle_yellow = Materials.uniform( [ "ambient": Colors.yellow() * af, "diffuse": Colors.yellow() * 0.8  ] ) 

  var v1 = pos(-1, -1, 0)
  var v2 = pos( 1, -1, 0)
  var v3 = pos( 0,  1, 0)
  var v4 = pos( 0,-0.5, 1)
  var triangle1 = translate(vec(0, 0, 0), decorate(triangle_green,  triangle(v1, v2, v3)))
  var triangle2 = translate(vec(0, 0, 0), decorate(triangle_yellow, triangle(v1, v2, v4)))
  var triangle3 = translate(vec(0, 0, 0), decorate(triangle_blue,   triangle(v1, v3, v4)))
  var triangle4 = translate(vec(0, 0, 0), decorate(triangle_red,    triangle(v3, v2, v4)))
  //var triangle1 = translate(vec(0, 0, 0), decorate(reflective_material,  triangle(v1, v2, v3)))
  //var triangle2 = translate(vec(0, 0, 0), decorate(reflective_material, triangle(v1, v2, v4)))
  //var triangle3 = translate(vec(0, 0, 0), decorate(reflective_material,   triangle(v1, v3, v4)))
  //var triangle4 = translate(vec(0, 0, 0), decorate(reflective_material,    triangle(v3, v2, v4)))
  
  // Create root union
  //var triangle = union([ triangle1, triangle1, triangle1, triangle1 ])
  var a = x[now]
  primitives.push_back(rotate_around_y(degrees(a), triangle1))
  primitives.push_back(rotate_around_y(degrees(a), triangle2))
  primitives.push_back(rotate_around_y(degrees(a), triangle3))
  primitives.push_back(rotate_around_y(degrees(a), triangle4))
  //primitives.push_back(rotate_around_y(degrees(95), triangle))

  primitives.push_back( translate(vec(0,-2,0), decorate(floor_material, xz_plane())) )
  primitives.push_back( translate(vec(0,2,0), decorate(ceiling_material, xz_plane())) )
  primitives.push_back( translate(vec(-2,0,0), decorate(left_wall_material, yz_plane())) )
  primitives.push_back( translate(vec(2,0,0), decorate(right_wall_material, yz_plane())) )
  primitives.push_back( translate(vec(0,0,-2), decorate(back_wall_material, xy_plane())) )

  
  var root = union(primitives)

  var lights = [ 
    Lights.omnidirectional(pos(0,0,3), Colors.white())
  ]
  create_scene(camera, root, lights)
}

var renderer = Renderers.standard([ "width": res, "height": res, "sampler": Samplers.single(), "ray_tracer": Raytracers.v2() ])

pipeline(scene_animation(scene_at, seconds(1)), [ 
  Pipeline.animation(30),
  Pipeline.renderer(renderer),
  Pipeline.wif(),
  Pipeline.base64(),
  Pipeline.stdout() 
])